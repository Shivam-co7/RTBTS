<script>
    
    const apiKey = '<YourApiKey>';
    
    const passengerInitCoordinates = [77.280960, 28.563410];
    let passengerMarker;
  
    let taxiPassengerBatchCoordinates = [];
    let taxiConfig;
    const zoomLevel = 12;
  
    let routes = [];
    let bestRouteIndex;
  
    const routeLabelsDiv = document.getElementById('route-labels');
  
    const routeWeight = 9;
    const routeBackgroundWeight = 12;
    const fastestRouteColor = '#65A7A9';
    const grayedOutDivColor = '#979797';
  
    const map = tt.map({
      key: apiKey,
      container: 'map',
      center: passengerInitCoordinates,
      zoom: zoomLevel
    });
  
    const modal = document.getElementById('modal');
    const modalContent = document.getElementById('modal-content');
  
    function setDefaultTaxiConfig() {
      taxiConfig = [
        createTaxi('BUS #1', '#006967', [77.275100, 28.559800], 'assets/img/bus.png'),
        createTaxi('BUS #2', '#EC619F', [77.291898, 28.561183], 'assets/img/bus.png'),
        createTaxi('BUS #3', '#002C5E', [77.281900, 28.570420], 'assets/img/bus.png'),
        createTaxi('BUS #4', '#F9B023', [77.260500, 28.564240], 'assets/img/bus.png')
      ];
    }
  
    function createTaxi(name, color, coordinates, iconFilePath, iconWidth = 40, iconHeight = 40) {
      return {
        name: name,
        color: color,
        icon: "<img src=" + iconFilePath + " style='width: " + iconWidth + "px; height: " + iconHeight + "px;'>",
        coordinates: coordinates
      };
    }
  
    function updateTaxiBatchLocations(passengerCoordinates) {
      taxiPassengerBatchCoordinates = [];
      taxiConfig.forEach(taxi => {
        taxiPassengerBatchCoordinates.push(taxi.coordinates + ':' + passengerCoordinates);
      });
    }
  
    function humanReadableTimeFormat(time) {
      const hrs = Math.floor(time / 3600);
      const mins = Math.floor((time % 3600) / 60);
      const secs = time % 60;
      let formattedString = '';
      if (hrs > 0) {
        formattedString += hrs + ':' + (mins < 10 ? '0' : '');
      }
      formattedString += mins + ':' + (secs < 10 ? '0' : '');
      formattedString += secs;
      return formattedString;
    }
  
    function metersToKilometers(distance) {
      distance = distance / 1000;
      return distance.toFixed(1);
    }
  
    function convertToPoint(lat, long) {
      return {
        point: {
          latitude: lat,
          longitude: long
        }
      };
    }
  
    function routeOnMouseOverAnimation(route) {
      map.moveLayer(route[0]);
      map.moveLayer(route[1]);
    }
  
    function bringBestRouteToFront() {
      map.moveLayer(routes[bestRouteIndex][0]);
      map.moveLayer(routes[bestRouteIndex][1]);
    }
  
    function buildOriginsParameter() {
      const origins = [];
      taxiConfig.forEach(function (taxi) {
        origins.push(convertToPoint(taxi.coordinates[1], taxi.coordinates[0]));
      });
      return origins;
    }
  
    function buildDestinationsParameter() {
      return [convertToPoint(passengerMarker.getLngLat().lat, passengerMarker.getLngLat().lng)];
    }
  
    function modifyFastestRouteColor(travelTimeInSecondsArray) {
      const sortedTab = travelTimeInSecondsArray.slice();
      sortedTab.sort(function (a, b) { return a - b });
      bestRouteIndex = travelTimeInSecondsArray.indexOf(sortedTab[0]);
      taxiConfig[bestRouteIndex].color = fastestRouteColor;
    }
  
    function displayModal() {
      modalContent.innerText = 'Nearest Bus Number ' + String(bestRouteIndex + 1);
      modal.style.display = 'block';
    }
  
    function animateRouteOnDivHover(e) {
      routeOnMouseOverAnimation(routes[e.target.id]);
    }
  
    function updateRouteLegend(travelTimeInSecondsArray, lengthInMetersArray, trafficDelayInSecondsArray) {
      let div;
      routeLabelsDiv.innerText = '';
  
      taxiConfig.forEach(function (child, index) {
        div = document.createElement('div');
        div.id = index;
        div.style.borderLeftColor = child.color;
        if (index !== bestRouteIndex) {
          div.style.color = grayedOutDivColor;
        }
        div.colorHex = child.color;
        div.innerText = child.name
          + ' drive time:' + humanReadableTimeFormat(travelTimeInSecondsArray[index])
          + ', distance:' + metersToKilometers(lengthInMetersArray[index])
          + 'km, ' + ((trafficDelayInSecondsArray[index] === 0) ? 'no traffic delay' : 'traffic delay:' + humanReadableTimeFormat(trafficDelayInSecondsArray[index]));
        div.addEventListener('mouseover', animateRouteOnDivHover);
        div.addEventListener('mouseout', bringBestRouteToFront);
        routeLabelsDiv.appendChild(div);
      });
    }
  
    function drawAllRoutes() {
      tt.services.calculateRoute({
        batchMode: 'sync',
        key: apiKey,
        batchItems: [
          { locations: taxiPassengerBatchCoordinates[0] },
          { locations: taxiPassengerBatchCoordinates[1] },
          { locations: taxiPassengerBatchCoordinates[2] },
          { locations: taxiPassengerBatchCoordinates[3] }
        ]
      })
        .then(function (results) {
          results.batchItems.forEach(function (singleRoute, index) {
            const routeGeoJson = singleRoute.toGeoJson();
            const route = [];
            const route_background_layer_id = 'route_background_' + index;
            const route_layer_id = 'route_' + index;
  
            map.addLayer(buildStyle(route_background_layer_id, routeGeoJson, 'black', routeBackgroundWeight))
              .addLayer(buildStyle(route_layer_id, routeGeoJson, taxiConfig[index].color, routeWeight));
  
            route[0] = route_background_layer_id;
            route[1] = route_layer_id;
            routes[index] = route;
  
            if (index === bestRouteIndex) {
              const bounds = new tt.LngLatBounds();
              routeGeoJson.features[0].geometry.coordinates.forEach(function (point) {
                bounds.extend(tt.LngLat.convert(point));
              });
              map.fitBounds(bounds, { padding: 150 });
            }
  
            map.on("mouseenter", route_layer_id, function () {
              map.moveLayer(route_background_layer_id);
              map.moveLayer(route_layer_id);
            });
  
            map.on("mouseleave", route_layer_id, function () {
              bringBestRouteToFront();
            });
          });
          bringBestRouteToFront();
        });
    }
  
    function buildStyle(id, data, color, width) {
      return {
        'id': id,
        'type': 'line',
        'source': {
          'type': 'geojson',
          'data': data
        },
        'paint': {
          'line-color': color,
          'line-width': width
        },
        'layout': {
          'line-cap': 'round',
          'line-join': 'round'
        }
      }
    }
  
    function clear() {
      routes.forEach(function (child) {
        map.removeLayer(child[0]);
        map.removeLayer(child[1]);
        map.removeSource(child[0]);
        map.removeSource(child[1]);
      });
      routes = [];
      setDefaultTaxiConfig();
      passengerMarker.togglePopup();
    }
  
    function processMatrixResponse(result) {
      const travelTimeInSecondsArray = [];
      const lengthInMetersArray = [];
      const trafficDelayInSecondsArray = [];
      result.matrix.forEach(function (child) {
        travelTimeInSecondsArray.push(child[0].response.routeSummary.travelTimeInSeconds);
        lengthInMetersArray.push(child[0].response.routeSummary.lengthInMeters);
        trafficDelayInSecondsArray.push(child[0].response.routeSummary.trafficDelayInSeconds);
      });
      modifyFastestRouteColor(travelTimeInSecondsArray);
      updateRouteLegend(travelTimeInSecondsArray, lengthInMetersArray, trafficDelayInSecondsArray);
      drawAllRoutes();
      displayModal();
    }
  
    function callMatrix() {
      const origins = buildOriginsParameter();
      const destinations = buildDestinationsParameter();
      tt.services.matrixRouting({
        key: apiKey,
        origins: origins,
        destinations: destinations,
        traffic: true
      }).then(processMatrixResponse);
    }
  
    function submitButtonHandler() {
      clear();
      callMatrix();
    }
  
    function drawPassengerMarkerOnMap(geoResponse) {
      if (geoResponse && geoResponse.addresses
        && geoResponse.addresses[0].address.freeformAddress) {
        passengerMarker.remove();
        passengerMarker = createPassengerMarker(geoResponse.addresses[0].position,
          new tt.Popup({ offset: 35 }).setHTML(geoResponse.addresses[0].address.freeformAddress));
        passengerMarker.togglePopup();
      }
    }
  
    function createPassengerMarker(markerCoordinates, popup) {
      const passengerMarkerElement = document.createElement('div');
      passengerMarkerElement.innerHTML = "<img src='assets/img/man-waving-arm.png' style='width: 30px; height: 30px';>";
      return new tt.Marker({ element: passengerMarkerElement }).setLngLat(markerCoordinates).setPopup(popup).addTo(map);
    }
  
    setDefaultTaxiConfig();
    updateTaxiBatchLocations(passengerInitCoordinates);
  
    tt.setProductInfo('Bus Route application', '1.00');
  
    map.addControl(new tt.NavigationControl(), 'top-left');
    passengerMarker = createPassengerMarker(passengerInitCoordinates,
      new tt.Popup({ offset: 35 }).setHTML("Click anywhere on the map to change passenger location."));
    passengerMarker.togglePopup();
    taxiConfig.forEach(function (taxi) {
      const carMarkerElement = document.createElement('div');
      carMarkerElement.innerHTML = taxi.icon;
      new tt.Marker({ element: carMarkerElement, offset: [0, 27] }).setLngLat(taxi.coordinates).addTo(map);
    });
  
    map.on('click', function (event) {
      const position = event.lngLat;
      tt.services.reverseGeocode({
        key: apiKey,
        position: position
      })
        .then(function (results) {
          drawPassengerMarkerOnMap(results);
          updateTaxiBatchLocations(passengerMarker.getLngLat().toArray());
        });
    });
  
    modal.addEventListener('click', function () {
      modal.style.display = 'none';
    });
    document.getElementById('submit-button').addEventListener('click', submitButtonHandler);
  
  </script>
  
